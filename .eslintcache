[{"C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\index.js":"1","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\App.js":"2","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\reportWebVitals.js":"3","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\Track.js":"4","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\ModalWindow.js":"5","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\TrackSearch.js":"6","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\ArtistSearch.js":"7"},{"size":706,"mtime":1608166157807,"results":"8","hashOfConfig":"9"},{"size":2977,"mtime":1609895646692,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":552,"mtime":1609725962280,"results":"12","hashOfConfig":"9"},{"size":620,"mtime":1609118920895,"results":"13","hashOfConfig":"9"},{"size":7493,"mtime":1609895536616,"results":"14","hashOfConfig":"9"},{"size":7424,"mtime":1609895537789,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"b7och2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"19"},"C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\index.js",["36","37","38"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport {createPopper} from '@popperjs/core';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nconst jquery = window.jquery;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();  \n",["39","40"],"C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\App.js",["41","42"],"import React, {Component} from 'react';\nimport TrackSearch from './TrackSearch';\nimport ArtistSearch from './ArtistSearch';\nimport Track from './Track';\nimport './App.css';\nimport querystring from 'query-string';\nimport Slider, {Range} from 'rc-slider'\nimport 'rc-slider/assets/index.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.clientId = '1ebd00c73d2445f8bc75f0db7bb97b11'\n    this.clientSecret = '36a2136e129043af99edf1e3b4b0de1f'\n    this.state = {\n      serverData: {\n        user: {\n          name: 'Daddy'\n        }\n      },\n      topTracks: [\n        {\n          name: 'LUCY!',\n          artists:['Jaden']\n        },\n        {\n          name: 'Alien Boy',\n          artists: ['Oliver Tree']\n        },\n        {\n          name: 'Strangers',\n          artists: ['Mt. Joy']\n        }\n      ],\n      isArtist: false\n    }\n    \n  }\n\n  handleClick(e){\n    this.setState(state =>({isArtist: !state.isArtist}))\n  }\n\n  componentDidMount(){\n    let parsed = querystring.parse(window.location.search)\n    let accessToken = parsed.access_token\n    this.token = accessToken\n    if(!accessToken) return\n    console.log(\"accessToken:\" + accessToken)\n    fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json())\n    .then(data => {\n      this.setState({serverData: {user: {name: data.display_name, id: data.id}}})\n    })\n\n    fetch('https://api.spotify.com/v1/me/top/tracks?time_range=short_term', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json())\n    .then(data => {\n      console.log('TRACKS DATA')\n      console.log(data)\n      this.setState({\n        topTracks: data.items.map(track =>{\n          return {\n            name: track.name,\n            artists: track.artists,\n            album: track.album\n          }\n        })\n      })\n    })\n  }\n  \n\n  render(){\n    let centerStyle = {textAlignVertical: \"center\",textAlign: \"center\"}\n    return (\n      <div class=\"App\" >\n        {this.state.serverData.user.name !== 'Daddy' ?\n         <div>\n            <h1 style={centerStyle}>Welcome {this.state.serverData.user.name}!</h1>\n            <h2>Make playlists from your musical favorites</h2>\n            <button onClick={this.handleClick.bind(this)}>Artists or Tracks</button>\n            {this.state.isArtist? \n              <ArtistSearch accessToken={this.token} userId={this.state.serverData.user.id}/>:\n              <TrackSearch accessToken={this.token} userId={this.state.serverData.user.id}/>\n            }\n            <h2 style={centerStyle}>Your recent top tracks:</h2>\n            {this.state.topTracks.slice(0,3).map(value =><Track track={value} style={centerStyle}/>)}\n          </div> : <button onClick={()=>window.location='http://localhost:8888/login'}\n          style={centerStyle}>Sign in with Spotify!</button>\n        }\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\reportWebVitals.js",[],"C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\Track.js",["43"],"import React, {Component} from 'react';\r\n\r\nclass Track extends Component{\r\n    render(){\r\n        return (\r\n            <div class=\"Track\" style = {{textAlignVertical: \"center\",textAlign: \"center\", \r\n            display: 'inline-block', width: '30%'}}>\r\n                {this.props.track.album? <img src={this.props.track.album.images[0].url} width='150' height='150'/> : []}\r\n                <h3>{this.props.track.name}</h3>\r\n                <h4>{this.props.track.artists[0].name}</h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\ModalWindow.js",["44","45","46"],"C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\TrackSearch.js",["47"],"import React, {Component} from 'react';\r\nimport Slider, {Range} from 'rc-slider';\r\nimport Track from './Track'\r\n\r\nclass TrackSearch extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      suggestions: [\r\n        {\r\n          name: 'LUCY!',\r\n          artists: ['Jaden']\r\n        },\r\n        {\r\n          name: 'Alien Boy',\r\n          artists: ['Oliver Tree']\r\n        },\r\n        {\r\n          name: 'Strangers',\r\n          artists: ['Mt. Joy']\r\n        }\r\n      ],\r\n      playlist: [],\r\n      acousticness: [0, 1],\r\n      danceability: [0, 1],\r\n      energy: [0, 1],\r\n      instrumentalness: [0, 1],\r\n      liveness: [0, 1],\r\n      loudness: [0, 1],\r\n      speechiness: [0, 1],\r\n      valence: [0, 1],\r\n      tempo: [0, 1],\r\n      popularity: [0, 100],\r\n      trackInfo: '',\r\n      playlistName: ''\r\n    }\r\n    this.searched = false\r\n  }\r\n\r\n  updateList(){\r\n    if(this.state.text==='') return\r\n    let queryText = this.state.text.replace(' ', '+')\r\n    let searchURL = `https://api.spotify.com/v1/search?q=${queryText}&type=track&limit=10`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(\"SEARCH DATA\")\r\n      console.log(data)\r\n      this.setState({\r\n        suggestions: data.tracks.items.map(track=>{\r\n          return {\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            id: track.id\r\n          }\r\n        })\r\n      }, ()=> console.log(this.state.suggestions))\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({text: e.target.value}, this.updateList)\r\n  }\r\n\r\n  handleRange(name, e){\r\n    this.setState({[name]: e})\r\n  }\r\n\r\n  handleSearch = (e) => {\r\n    this.searched = true\r\n    console.log(this.state)\r\n    let searchURL = `https://api.spotify.com/v1/recommendations?market=US&seed_tracks=${this.state.suggestions[0].id}&min_acousticness=${this.state.acousticness[0]}&max_acousticness=${this.state.acousticness[1]}&min_danceability=${this.state.danceability[0]}&max_danceability=${this.state.danceability[1]}&min_energy=${this.state.energy[0]}&max_energy=${this.state.energy[1]}&min_instrumentalness=${this.state.instrumentalness[0]}&max_instrumentalness=${this.state.instrumentalness[1]}&min_liveness=${this.state.liveness[0]}&max_liveness=${this.state.liveness[1]}&min_loudness=${(this.state.loudness[0]-1)*60}&max_loudness=${(this.state.loudness[1]-1)*60}&min_popularity=${this.state.popularity[0]*100}&max_popularity=${this.state.popularity[1]*100}&min_speechiness=${this.state.speechiness[0]}&max_speechiness=${this.state.speechiness[1]}&min_tempo=${this.state.tempo[0]*200}&max_tempo=${this.state.tempo[1]*200}&min_valence=${this.state.valence[0]}&max_valence=${this.state.valence[1]}`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      this.setState({\r\n        playlist: data.tracks\r\n      }, ()=> console.log(this.state.playlist))\r\n    })\r\n  }\r\n\r\n  handleClick(e){\r\n    this.searched = true\r\n    let searchURL = `https://api.spotify.com/v1/recommendations?market=US&seed_tracks=${e.target.id}&min_acousticness=${this.state.acousticness[0]}&max_acousticness=${this.state.acousticness[1]}&min_danceability=${this.state.danceability[0]}&max_danceability=${this.state.danceability[1]}&min_energy=${this.state.energy[0]}&max_energy=${this.state.energy[1]}&min_instrumentalness=${this.state.instrumentalness[0]}&max_instrumentalness=${this.state.instrumentalness[1]}&min_liveness=${this.state.liveness[0]}&max_liveness=${this.state.liveness[1]}&min_loudness=${(this.state.loudness[0]-1)*60}&max_loudness=${(this.state.loudness[1]-1)*60}&min_popularity=${this.state.popularity[0]*100}&max_popularity=${this.state.popularity[1]*100}&min_speechiness=${this.state.speechiness[0]}&max_speechiness=${this.state.speechiness[1]}&min_tempo=${this.state.tempo[0]*200}&max_tempo=${this.state.tempo[1]*200}&min_valence=${this.state.valence[0]}&max_valence=${this.state.valence[1]}`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      this.setState({\r\n        playlist: data.tracks,\r\n        trackInfo: e.target.value\r\n      }, ()=> console.log(this.state.playlist))\r\n    })\r\n  }\r\n\r\n  setPlaylistName(e){\r\n    this.setState({playlistName: e.target.value})\r\n  }\r\n\r\n  savePlaylist(){\r\n    console.log(\"playlist name: \" + this.state.playlistName)\r\n    fetch(`https://api.spotify.com/v1/users/${this.props.userId}/playlists`, {\r\n      method: 'POST',\r\n      body: \"{\\\"name\\\": \\\"\" + this.state.playlistName + \"\\\",\\\"description\\\": \\\"Playlist based on \" + this.state.trackInfo + \"\\\", \\\"public\\\":false}\",\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(response => response.json())\r\n    .then(playlist =>{\r\n      console.log('playlist made')\r\n      console.log(playlist)\r\n      console.log(this.state.playlist.map(track => track.uri))\r\n      const sub = this.state.playlist.map(track=> \"\\\"\" + track.uri + \"\\\"\").join()\r\n      fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {\r\n        method: 'POST',\r\n        body: \"{\\\"uris\\\": [\" + sub +\"]}\",\r\n        headers: {\r\n          'Authorization': 'Bearer ' + this.props.accessToken,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    let priorityOptions=['Acousticness', 'Danceability', 'Energy', 'Instrumentalness', 'Liveness',\r\n    'Loudness', 'Speechiness', 'Valence', 'Tempo', 'Popularity']\r\n    return (\r\n      <div class=\"SearchBox\" style={{textAlignVertical: \"center\",textAlign: \"center\", height:'50%'}}>\r\n        <button onclick=\"myFunction()\" class=\"dropbtn\">Some rando button</button>\r\n        <h2> </h2>\r\n        <div class='priorities'>\r\n          {priorityOptions.map(text=>{\r\n            return <div>\r\n              <label>{text}</label>\r\n              <Range className={text.toLowerCase()} style={{margin: 'auto', width:'30%'}} defaultValue={[0,1]} min={0} max={1}\r\n              step={0.05} onChange={(e)=>{this.handleRange(text.toLowerCase(), e)}}/>\r\n            </div>  \r\n          })}  \r\n        </div>\r\n        <div>\r\n          <input autoComplete=\"off\" list=\"suggestions\" placeholder='Search a Track!!!' onChange={this.handleChange}/>\r\n        </div> \r\n        <div>\r\n          <ul>\r\n            {this.state.suggestions !== [] ? this.state.suggestions.map(track => \r\n            <div>\r\n              <button id={track.id} value={track.name + \" by \" + track.artist} onClick={this.handleClick.bind(this) }>{track.name}, {track.artist}</button>\r\n            </div>): []}\r\n          </ul>\r\n        </div>\r\n        {this.searched ? \r\n        <div class='playlist'>\r\n          {this.state.playlist.map(track=>{\r\n            return <Track track={track}/>\r\n          })}\r\n          <div>\r\n            <label for='playlistName'>Playlist Title: </label>\r\n            <input id='playlistName' onChange={this.setPlaylistName.bind(this)}/> <br/>\r\n            <button onClick={this.savePlaylist.bind(this)}>Save to Spotify!</button>\r\n          </div>\r\n        </div> :[]}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default TrackSearch;","C:\\Users\\willx\\Desktop\\lyricaljsapp\\spotifyapp\\src\\ArtistSearch.js",["48"],"import React, {Component} from 'react';\r\nimport Slider, {Range} from 'rc-slider';\r\nimport Track from './Track'\r\n\r\nclass ArtistSearch extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      suggestions: [\r\n        {\r\n          name: 'LUCY!',\r\n          artists: ['Jaden']\r\n        },\r\n        {\r\n          name: 'Alien Boy',\r\n          artists: ['Oliver Tree']\r\n        },\r\n        {\r\n          name: 'Strangers',\r\n          artists: ['Mt. Joy']\r\n        }\r\n      ],\r\n      playlist: [],\r\n      acousticness: [0, 1],\r\n      danceability: [0, 1],\r\n      energy: [0, 1],\r\n      instrumentalness: [0, 1],\r\n      liveness: [0, 1],\r\n      loudness: [0, 1],\r\n      speechiness: [0, 1],\r\n      valence: [0, 1],\r\n      tempo: [0, 1],\r\n      popularity: [0, 100],\r\n      trackInfo: '',\r\n      playlistName: ''\r\n    }\r\n    this.searched = false\r\n  }\r\n\r\n  updateList(){\r\n    if(this.state.text==='') return\r\n    let queryText = this.state.text.replace(' ', '+')\r\n    let searchURL = `https://api.spotify.com/v1/search?q=${queryText}&type=artist&limit=10`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(\"SEARCH DATA\")\r\n      console.log(data)\r\n      this.setState({\r\n        suggestions: data.artists.items.map(artist=>{\r\n          return {\r\n            name: artist.name,\r\n            id: artist.id\r\n          }\r\n        })\r\n      }, ()=> console.log(this.state.suggestions))\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({text: e.target.value}, this.updateList)\r\n  }\r\n\r\n  handleRange(name, e){\r\n    this.setState({[name]: e})\r\n  }\r\n\r\n  handleSearch = (e) => {\r\n    this.searched = true\r\n    console.log(this.state)\r\n    let searchURL = `https://api.spotify.com/v1/recommendations?market=US&seed_artists=${this.state.suggestions[0].id}&min_acousticness=${this.state.acousticness[0]}&max_acousticness=${this.state.acousticness[1]}&min_danceability=${this.state.danceability[0]}&max_danceability=${this.state.danceability[1]}&min_energy=${this.state.energy[0]}&max_energy=${this.state.energy[1]}&min_instrumentalness=${this.state.instrumentalness[0]}&max_instrumentalness=${this.state.instrumentalness[1]}&min_liveness=${this.state.liveness[0]}&max_liveness=${this.state.liveness[1]}&min_loudness=${(this.state.loudness[0]-1)*60}&max_loudness=${(this.state.loudness[1]-1)*60}&min_popularity=${this.state.popularity[0]*100}&max_popularity=${this.state.popularity[1]*100}&min_speechiness=${this.state.speechiness[0]}&max_speechiness=${this.state.speechiness[1]}&min_tempo=${this.state.tempo[0]*200}&max_tempo=${this.state.tempo[1]*200}&min_valence=${this.state.valence[0]}&max_valence=${this.state.valence[1]}`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      this.setState({\r\n        playlist: data.tracks\r\n      }, ()=> console.log(this.state.playlist))\r\n    })\r\n  }\r\n\r\n  handleClick(e){\r\n    this.searched = true\r\n    let searchURL = `https://api.spotify.com/v1/recommendations?market=US&seed_artists=${e.target.id}&min_acousticness=${this.state.acousticness[0]}&max_acousticness=${this.state.acousticness[1]}&min_danceability=${this.state.danceability[0]}&max_danceability=${this.state.danceability[1]}&min_energy=${this.state.energy[0]}&max_energy=${this.state.energy[1]}&min_instrumentalness=${this.state.instrumentalness[0]}&max_instrumentalness=${this.state.instrumentalness[1]}&min_liveness=${this.state.liveness[0]}&max_liveness=${this.state.liveness[1]}&min_loudness=${(this.state.loudness[0]-1)*60}&max_loudness=${(this.state.loudness[1]-1)*60}&min_popularity=${this.state.popularity[0]*100}&max_popularity=${this.state.popularity[1]*100}&min_speechiness=${this.state.speechiness[0]}&max_speechiness=${this.state.speechiness[1]}&min_tempo=${this.state.tempo[0]*200}&max_tempo=${this.state.tempo[1]*200}&min_valence=${this.state.valence[0]}&max_valence=${this.state.valence[1]}`\r\n    fetch(searchURL, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken\r\n      }\r\n    }).then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      this.setState({\r\n        playlist: data.tracks,\r\n        trackInfo: e.target.value\r\n      }, ()=> console.log(this.state.playlist))\r\n    })\r\n  }\r\n\r\n  setPlaylistName(e){\r\n    this.setState({playlistName: e.target.value})\r\n  }\r\n\r\n  savePlaylist(){\r\n    console.log(\"playlist name: \" + this.state.playlistName)\r\n    fetch(`https://api.spotify.com/v1/users/${this.props.userId}/playlists`, {\r\n      method: 'POST',\r\n      body: \"{\\\"name\\\": \\\"\" + this.state.playlistName + \"\\\",\\\"description\\\": \\\"Playlist based on \" + this.state.trackInfo + \"\\\", \\\"public\\\":false}\",\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.props.accessToken,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(response => response.json())\r\n    .then(playlist =>{\r\n      console.log('playlist made')\r\n      console.log(playlist)\r\n      console.log(this.state.playlist.map(track => track.uri))\r\n      const sub = this.state.playlist.map(track=> \"\\\"\" + track.uri + \"\\\"\").join()\r\n      fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {\r\n        method: 'POST',\r\n        body: \"{\\\"uris\\\": [\" + sub +\"]}\",\r\n        headers: {\r\n          'Authorization': 'Bearer ' + this.props.accessToken,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    let priorityOptions=['Acousticness', 'Danceability', 'Energy', 'Instrumentalness', 'Liveness',\r\n    'Loudness', 'Speechiness', 'Valence', 'Tempo', 'Popularity']\r\n    return (\r\n      <div class=\"SearchBox\" style={{textAlignVertical: \"center\",textAlign: \"center\", height:'50%'}}>\r\n        <button onclick=\"myFunction()\" class=\"dropbtn\">Some rando button</button>\r\n        <h2> </h2>\r\n        <div class='priorities'>\r\n          {priorityOptions.map(text=>{\r\n            return <div>\r\n              <label>{text}</label>\r\n              <Range className={text.toLowerCase()} style={{margin: 'auto', width:'30%'}} defaultValue={[0,1]} min={0} max={1}\r\n              step={0.05} onChange={(e)=>{this.handleRange(text.toLowerCase(), e)}}/>\r\n            </div>  \r\n          })}  \r\n        </div>\r\n        <div>\r\n          <input autoComplete=\"off\" list=\"suggestions\" placeholder='Search an Artist!!!' onChange={this.handleChange}/>\r\n        </div> \r\n        <div>\r\n          <ul>\r\n            {this.state.suggestions !== [] ? this.state.suggestions.map(artist => \r\n            <div>\r\n              <button id={artist.id} value={artist.name} onClick={this.handleClick.bind(this) }>{artist.name}</button>\r\n            </div>): []}\r\n          </ul>\r\n        </div>\r\n        {this.searched ? \r\n        <div class='playlist'>\r\n          {this.state.playlist.map(track=>{\r\n            return <Track track={track}/>\r\n          })}\r\n          <div>\r\n            <label for='playlistName'>Playlist Title: </label>\r\n            <input id='playlistName' onChange={this.setPlaylistName.bind(this)}/> <br/>\r\n            <button onClick={this.savePlaylist.bind(this)}>Save to Spotify!</button>\r\n          </div>\r\n        </div> :[]}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ArtistSearch;",{"ruleId":"49","severity":1,"message":"50","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":9},{"ruleId":"49","severity":1,"message":"53","line":3,"column":9,"nodeType":"51","messageId":"52","endLine":3,"endColumn":21},{"ruleId":"49","severity":1,"message":"54","line":11,"column":7,"nodeType":"51","messageId":"52","endLine":11,"endColumn":13},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"49","severity":1,"message":"59","line":7,"column":8,"nodeType":"51","messageId":"52","endLine":7,"endColumn":14},{"ruleId":"49","severity":1,"message":"60","line":7,"column":17,"nodeType":"51","messageId":"52","endLine":7,"endColumn":22},{"ruleId":"61","severity":1,"message":"62","line":8,"column":42,"nodeType":"63","endLine":8,"endColumn":116},{"ruleId":"49","severity":1,"message":"64","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":13},{"ruleId":"49","severity":1,"message":"65","line":2,"column":9,"nodeType":"51","messageId":"52","endLine":2,"endColumn":14},{"ruleId":"66","severity":2,"message":"67","line":13,"column":42,"nodeType":"51","messageId":"68","endLine":13,"endColumn":53},{"ruleId":"49","severity":1,"message":"59","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":14},{"ruleId":"49","severity":1,"message":"59","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":14},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'createPopper' is defined but never used.","'jquery' is assigned a value but never used.","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"'Slider' is defined but never used.","'Range' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","'Modal' is defined but never used.","no-undef","'accessToken' is not defined.","undef","no-global-assign","no-unsafe-negation"]